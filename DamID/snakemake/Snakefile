"""
Author: Stefan Peidli
Aim: Snakemake workflow for DamID analysis.
Date: 18.01.2024
Run: snakemake
DAG: snakemake --forceall --dag | dot -Tpdf > snake_dag.pdf
Rulegraph: snakemake --forceall --rulegraph | dot -Tpdf > snake_rulegraph.pdf
Description:
    Custom pipeline for analysis of DamID data.
"""

# Configuration, Sample names and Paths
configfile: "../configuration/config.yaml"
from pathlib import Path
TEMPDIR = Path(config['TEMPDIR'])
GEO_files = config['samples'].values()
SRR_list = config['samples'].keys()
#   SRR21146078: control-oDam-replicate-1
#   SRR21146077: control-oDam-replicate-2
#   SRR21146076: control-oDam-replicate-3
#   SRR21146075: oDam-Pros-replicate-1
#   SRR21146074: oDam-Pros-replicate-2
#   SRR21146073: oDam-Fer1-replicate-1
#   SRR21146072: oDam-Fer1-replicate-2
#   SRR21146071: oDam-Fer1-replicate-3
# constrain SRR wildcard to SRR+numbers only
wildcard_constraints:
    SRR="SRR\d+"

rule all:
    input:
        expand(TEMPDIR / "macs2/{SRR}_peaks.xls", SRR=SRR_list),
        TEMPDIR / "macs2/SRR21146075_vs_SRR21146078_peaks.narrowPeak", # Rep1
        TEMPDIR / "macs2/SRR21146074_vs_SRR21146077_peaks.narrowPeak", # Rep2
        "../results/SRR21146075_vs_SRR21146078_annotated_peaks_2.csv", # Rep1
        "../results/SRR21146074_vs_SRR21146077_annotated_peaks_2.csv", # Rep2
        expand(TEMPDIR / "bigwig/{SRR}.bw", SRR=SRR_list),
        # expand(TEMPDIR / "GEO/{GEO}.bw", GEO=GEO_files),
        "../results/tables/diffbind_results.tsv",
        expand(TEMPDIR / "homer/{SRR}_homer_motifs.tsv", SRR=SRR_list)

### Get processed data ###
rule get_GEO:
    # from GEO supp, preprocessed
    output:
        expand(TEMPDIR / "GEO/{GEO}.bw", GEO=GEO_files)
    shell:
        """
        mkdir -p {TEMPDIR}/GEO
        cd {TEMPDIR}/GEO
        wget -O GSE211629_RAW.tar 'http://www.ncbi.nlm.nih.gov/geo/download/?acc=GSE211629&format=file'
        tar -xvf GSE211629_RAW.tar
        """

### Process data from Raw ###
rule get_bowtie_index:
    # Get genome index for bowtie2
    output:
        expand(TEMPDIR / "genome/{{genome}}/{{genome}}.{i}.bt2", 
               i=[1,2,3,4,'rev.1','rev.2'])
    shell:
        """
        mkdir -p {TEMPDIR}/genome
        cd {TEMPDIR}/genome
        wget https://genome-idx.s3.amazonaws.com/bt/{wildcards.genome}.zip
        unzip {wildcards.genome}.zip
        """

rule sra_prefetch:
    # Get data
    output:
        TEMPDIR / 'SRA/{SRR}/{SRR}.sra'
    conda: "../../environments/sra_env.yaml"
    shell:
        """
        mkdir -p {TEMPDIR}/SRA
        cd {TEMPDIR}/SRA
        prefetch {wildcards.SRR}
        """

rule sra_fastq_dump:
    # Extract fastq
    input:
        TEMPDIR / 'SRA/{SRR}/{SRR}.sra'
    output:
        TEMPDIR / 'fastq/{SRR}.fastq'
    conda: "../../environments/sra_env.yaml"
    shell:
        """
        mkdir -p {TEMPDIR}/fastq
        cd {TEMPDIR}/fastq
        fastq-dump {input}  # single-read apparently
        """

rule trim_galore:
    # Trim reads
    input:
        fastq=TEMPDIR / 'fastq/{SRR}.fastq'
    output:
        TEMPDIR / 'fastq/{SRR}_trimmed.fq'
    conda: 'chip_env' # "../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    threads: 16
    shell:
        """
        cd {TEMPDIR}/fastq
        trim_galore --fastqc --illumina --clip_R1 10 --three_prime_clip_R1 10 \
            --length 36 --cores {threads} \
            --output_dir {TEMPDIR}/fastq {input.fastq}
        """

rule bowtie2:
    # Align reads
    input:
        index=TEMPDIR / "genome/BDGP6",
        fastq=TEMPDIR / 'fastq/{SRR}_trimmed.fq',
        index_files=expand(TEMPDIR / "genome/BDGP6/BDGP6.{i}.bt2", 
               i=[1,2,3,4,'rev.1','rev.2'])
    output:
        TEMPDIR / "bowtie2/{SRR}.sam",
    conda: 'chip_env' # "../environments/chip_env.yaml"
    threads: 16
    resources:
        time='23:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        bowtie2 -x {input.index}/BDGP6 \
                -U {input.fastq} \
                -S {output} \
                -p {threads} \
                -N 1 # allow 1 mismatch, higher than 1 not allowed...
        """

rule sam_to_bam_filter:
    # Filter for uniquely mapped reads and convert to bam
    input:
        TEMPDIR / "bowtie2/{SRR}.sam"
    output:
        TEMPDIR / "bowtie2/{SRR}.bam"
    conda: 'chip_env' # "../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        # filter for uniquely mapped reads (q=1)
        samtools view -b -q 1 {input} -o {output}
        """

rule sort_bam:
    # Sort bam by coordinates
    input:
        TEMPDIR / "bowtie2/{SRR}.bam"
    output:
        TEMPDIR / "bowtie2/{SRR}.sorted.bam"
    conda: 'chip_env' # "../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        samtools sort {input} -o {output}
        """

rule index_bam:
    # Index bam
    input:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam"
    output:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam.bai"
    conda: 'chip_env' # "../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        samtools index {input}
        """

rule facount:
    # Get genome stats, OPTIONAL RULE
    output: TEMPDIR / "facount/genome_stats.txt"
    shell:
        """
        wget https://ftp.ensembl.org/pub/release-111/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        gunzip Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        faCount Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa -summary > {output}
        # this gave 143726002 as effective genome size
        """

rule bam_to_bigwig:
    # Convert bam to bigwig for visualization in genome browser
    input:
        bam=TEMPDIR / "bowtie2/{SRA}.sorted.bam",
        bai=TEMPDIR / "bowtie2/{SRA}.sorted.bam.bai"
    output:
        TEMPDIR / "bigwig/{SRA}.bw"
    conda: 'chip_env' # "../environments/chip_env.yaml
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        mkdir -p {TEMPDIR}/bigwig
        bamCoverage -b {input.bam} \
                    -o {output} \
                    --normalizeUsing RPKM \
                    --binSize 10 \
                    --effectiveGenomeSize 143726002 \
                    --extendReads 200 \
                    --centerReads \
                    --ignoreDuplicates \
                    --smoothLength 30 \
                    --outFileFormat bigwig
        """

### Peak Calling ###
rule macs2:
    # Call peaks with MACS2
    input:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam"
    output:
        TEMPDIR / "macs2/{SRA}_peaks.narrowPeak",
        TEMPDIR / "macs2/{SRA}_summits.bed",
        TEMPDIR / "macs2/{SRA}_peaks.xls"
    conda: 'macs_env'  # "../environments/macs_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        macs2 callpeak -t {input} \
              -f BAM -g 1.4e+08 \
              -q 0.05 \
              --outdir {TEMPDIR}/macs2 \
              -m 3 30 \
              --d-min 4 \
              -n {wildcards.SRA}
        """

rule macs2_contrast:
    # Call peaks using MACS2 with a control sample as contrast
    input:
        signal=TEMPDIR / "bowtie2/{SRA_signal}.sorted.bam",
        control=TEMPDIR / "bowtie2/{SRA_control}.sorted.bam"
    output:
        TEMPDIR / "macs2/{SRA_signal}_vs_{SRA_control}_peaks.narrowPeak",
        TEMPDIR / "macs2/{SRA_signal}_vs_{SRA_control}_summits.bed",
        TEMPDIR / "macs2/{SRA_signal}_vs_{SRA_control}_peaks.xls"
    conda: 'macs_env'  # "../environments/macs_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        macs2 callpeak -t {input.signal} \
              -c {input.control} \
              -f BAM -g 1.4e+08 \
              -q 0.05 \
              --outdir {TEMPDIR}/macs2 \
              -m 3 30 \
              --d-min 4 \
              -n {wildcards.SRA_signal}_vs_{wildcards.SRA_control}
        """

rule annotate_peaks:
    # Annotate peaks with ChIPseeker
    input:
        bed_file=TEMPDIR / "macs2/{name}_summits.bed",
    output:
        annotated_file="../results/{name}_annotated_peaks.tsv"
    conda: 'chipseeker_env'  # "../../environments/chipseeker_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    script:
        "../../scripts/snake_chipseeker_annotate.R"

rule add_more_annotation:
    # Add even more annotation to the peaks
    input:
        peakfile=TEMPDIR / "macs2/{name}_peaks.narrowPeak",
        annotated_file="../results/{name}_annotated_peaks.tsv",
        gtf="/g/huber/users/peidli/utils/genomes/drosophila_melanogaster/Drosophila_melanogaster.BDGP6.46.110.gtf"
    output:
        "../results/{name}_annotated_peaks_2.csv"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    script:
        "../../scripts/snake_add_more_annotations.py"

rule diffbind:
    # Differential binding analysis with DiffBind
    input:
        bams=expand(TEMPDIR / "bowtie2/{SRR}.sorted.bam", SRR=SRR_list),
        narrows=expand(TEMPDIR / "macs2/{SRR}_peaks.narrowPeak", SRR=SRR_list)
    output:
        "../results/tables/diffbind_results.tsv"
    params:
        sampleSheet="../resources/samplesheet_metadata.csv"
    conda: "r_env" # "../../environments/diffbindR_env.yaml"  # DISFUNCT!
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    script: "scripts/DiffBind.R"

### Motif analysis ###
rule get_fasta:
    # Get genome fasta
    output:
        TEMPDIR / "genome/BDGP6/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa"
    shell:
        """
        cd {TEMPDIR}/genome/BDGP6
        wget https://ftp.ensembl.org/pub/release-111/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        gunzip Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        """

rule homer_define_motifs:
    # Define motifs for HOMER
    output:
        TEMPDIR / "homer/CANNTG.motif"
    conda: "homer_env" # "../../environments/homer_env.yaml"
    shell:
        """
        seq2profile.pl CANNTG 0 CANNTG_motif > {output}
        """

rule homer:
    # Motif analysis with HOMER
    input:
        peaks=TEMPDIR / "macs2/{SRR}_peaks.narrowPeak",
        fasta=TEMPDIR / "genome/BDGP6/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa",
        motif=TEMPDIR / "homer/CANNTG.motif"
    output:
        TEMPDIR / "homer/{SRR}_homer_motifs.tsv",
    conda: "homer_env" # "../../environments/homer_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        mkdir -p {TEMPDIR}/homer/preparsed/{wildcards.SRR}/
        cd {TEMPDIR}/homer/preparsed/{wildcards.SRR}/

        # Usage: findMotifsGenome.pl <pos file> <genome> <output directory> [additional options]
        findMotifsGenome.pl {input.peaks} {input.fasta} {TEMPDIR}/homer/ \
            -preparsedDir {TEMPDIR}/homer/preparsed/{wildcards.SRR}/ \
            -find {input.motif} > {output}
        """