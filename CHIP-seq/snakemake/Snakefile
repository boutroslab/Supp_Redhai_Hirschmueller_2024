"""
Author: Stefan Peidli
Aim: Snakemake workflow for CHIP-seq analysis of Scute and Cph.
Date: 17.01.2024
Run: snakemake
DAG: snakemake --forceall --dag | dot -Tpdf > snake_dag.pdf
Rulegraph: snakemake --forceall --rulegraph | dot -Tpdf > snake_rulegraph.pdf
Description:
    Custom pipeline for analysis of CHIP-seq data.
"""

# Configurations and paths
configfile: "../configuration/config.yaml"
from pathlib import Path
TEMPDIR = Path(config['TEMPDIR'])
# constrain SRA wildcard to valid SRA ids, i.e. "SRX"+numbers only
wildcard_constraints:
    SRA="SRR\d+"

rule all:
    input:
        expand(TEMPDIR / "macs2/{SRA}_peaks.xls", SRA=config['SRA_accessions']),
        TEMPDIR / "macs2/contrast_peaks.xls",
        "../results/contrast_annotated_peaks_2.csv",
        expand(TEMPDIR / "bigwig/{SRA}.bw", SRA=config['SRA_accessions']),
        TEMPDIR / "homer/contrast_peaks_homer_motifs.tsv",

### Processing rules ###
rule get_bowtie_index:
    # Get pre-built bowtie2 index for Drosophila melanogaster genome
    output:
        directory(TEMPDIR / "genome/{genome}"),
        TEMPDIR / 'genome/{genome}/{genome}.1.bt2',
        TEMPDIR / 'genome/{genome}/{genome}.2.bt2',
        TEMPDIR / 'genome/{genome}/{genome}.3.bt2',
        TEMPDIR / 'genome/{genome}/{genome}.4.bt2',
        TEMPDIR / 'genome/{genome}/{genome}.rev.1.bt2',
        TEMPDIR / 'genome/{genome}/{genome}.rev.2.bt2'
    shell:
        '''
        cd {TEMPDIR}/genome
        wget https://genome-idx.s3.amazonaws.com/bt/{wildcards.genome}.zip
        unzip {wildcards.genome}.zip
        '''

rule download_sra:
    # Get public CHIP-seq data from NCBI as SRA files
    output:
        TEMPDIR / "sra/{SRA}/{SRA}.sra"
    params:
        SRX=lambda wildcards: config['SRA_accessions'][wildcards.SRA]
    conda: "../../environments/sra_env.yaml"
    shell:
        """
        cd {TEMPDIR}/sra
        prefetch {params.SRX}
        """

rule fastq_dump:
    # Extract fastq files from SRA files
    input:
        TEMPDIR / "sra/{SRA}/{SRA}.sra"
    output:
        expand(TEMPDIR / "fastq/{{SRA}}_{i}.fastq", i=[1,2])
    conda: "../../environments/sra_env.yaml"
    resources:
        time='00:30:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        mkdir -p {TEMPDIR}/fastq
        cd {TEMPDIR}/fastq
        fastq-dump --split-files {input}
        """

rule trimgalor:
    # Trim adapters and low quality reads from fastq files
    input:
        fastq1=TEMPDIR / "fastq/{SRA}_1.fastq",
        fastq2=TEMPDIR / "fastq/{SRA}_2.fastq"
    output:
        TEMPDIR / "fastq/{SRA}_1_val_1.fq",
        TEMPDIR / "fastq/{SRA}_2_val_2.fq"
    conda: 'chip_env' # "../../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000
    threads: 16
    shell:
        """
        trim_galore --paired --fastqc --illumina --clip_R1 10 --clip_R2 10 \
            --three_prime_clip_R1 10 --three_prime_clip_R2 10 --length 36 \
            --cores {threads} \
            --output_dir {TEMPDIR}/fastq {input.fastq1} {input.fastq2}
        """

rule bowtie2:
    # Align trimmed reads to the Drosophila melanogaster genome
    input:
        index=TEMPDIR / "genome/BDGP6",
        fastq1=TEMPDIR / "fastq/{SRA}_1_val_1.fq",
        fastq2=TEMPDIR / "fastq/{SRA}_2_val_2.fq",
        index_files=expand(TEMPDIR / "genome/BDGP6/BDGP6.{i}.bt2", 
               i=[1,2,3,4,'rev.1','rev.2'])
    output:
        TEMPDIR / "bowtie2/{SRA}.sam",
    conda: 'chip_env' # "../../environments/chip_env.yaml"
    threads: 16
    resources:
        time='23:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        bowtie2 -x {input.index}/BDGP6 \
                -1 {input.fastq1} -2 {input.fastq2} \
                -S {output} \
                -p {threads} \
                -N 1 # allow 1 mismatch, higher than 1 not allowed...
        """

rule sam_to_bam_filter:
    # Filter for uniquely mapped reads and convert sam to bam
    input:
        TEMPDIR / "bowtie2/{SRA}.sam"
    output:
        TEMPDIR / "bowtie2/{SRA}.bam"
    conda: 'chip_env' # "../../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        # filter for uniquely mapped reads (q=1)
        samtools view -b -q 1 {input} -o {output}
        """

rule sort_bam:
    # Sort bam file by coordinates
    input:
        TEMPDIR / "bowtie2/{SRA}.bam"
    output:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam"
    conda: 'chip_env' # "../../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        samtools sort {input} -o {output}
        """

rule index_bam:
    # Index sorted bam file
    input:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam"
    output:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam.bai"
    conda: 'chip_env' # "../../environments/chip_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        samtools index {input}
        """

rule facount:
    # (Optional rule) I used facount to get the effective genome size, used for bigwig normalization. No need to run this if you believe the effective genome size is correct :)
    output: TEMPDIR / "facount/genome_stats.txt"
    shell:
        '''
        wget https://ftp.ensembl.org/pub/release-111/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        gunzip Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        faCount Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa -summary > {output}
        # this gave 143726002 as effective genome size. Checks out with the literature.
        '''

rule bam_to_bigwig:
    # Convert sorted bam file to bigwig for viewing in genome browsers
    input:
        bam=TEMPDIR / "bowtie2/{SRA}.sorted.bam",
        bai=TEMPDIR / "bowtie2/{SRA}.sorted.bam.bai"
    output:
        TEMPDIR / "bigwig/{SRA}.bw"
    conda: 'chip_env' # "../../environments/chip_env.yaml
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        mkdir -p {TEMPDIR}/bigwig
        bamCoverage -b {input.bam} \
                    -o {output} \
                    --normalizeUsing RPKM \
                    --binSize 10 \
                    --effectiveGenomeSize 143726002 \
                    --extendReads 200 \
                    --centerReads \
                    --ignoreDuplicates \
                    --smoothLength 30 \
                    --outFileFormat bigwig
        """

### Peak Calling ###
rule macs2:
    # Call peaks using MACS2
    input:
        TEMPDIR / "bowtie2/{SRA}.sorted.bam"
    output:
        TEMPDIR / "macs2/{SRA}_peaks.narrowPeak",
        TEMPDIR / "macs2/{SRA}_summits.bed",
        TEMPDIR / "macs2/{SRA}_peaks.xls"
    conda: 'macs_env'  # "../../environments/macs_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        macs2 callpeak -t {input} \
              -f BAM -g 1.4e+08 \
              -q 0.05 \
              --outdir {TEMPDIR}/macs2 \
              -n {wildcards.SRA}
        """

rule macs2_contrast:
    # Call peaks using MACS2 with a control sample as contrast
    input:
        signal=TEMPDIR / "bowtie2/SRR3845160.sorted.bam",
        control=TEMPDIR / "bowtie2/SRR3845161.sorted.bam"
    output:
        TEMPDIR / "macs2/contrast_peaks.narrowPeak",
        TEMPDIR / "macs2/contrast_summits.bed",
        TEMPDIR / "macs2/contrast_peaks.xls"
    conda: 'macs_env'  # "../../environments/macs_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        macs2 callpeak -t {input.signal} \
              -c {input.control} \
              -f BAM -g 1.4e+08 \
              -q 0.05 \
              --outdir {TEMPDIR}/macs2 \
              -n contrast
        """

rule annotate_peaks:
    # Annotate peaks with ChIPseeker
    input:
        bed_file=TEMPDIR / "macs2/{name}_summits.bed",
    output:
        annotated_file="../results/{name}_annotated_peaks.tsv"
    conda: 'chipseeker_env'  # "../../environments/chipseeker_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    script:
        "../../scripts/snake_chipseeker_annotate.R"

rule add_more_annotation:
    # Add even more annotation to the peaks
    input:
        peakfile=TEMPDIR / "macs2/{name}_peaks.narrowPeak",
        annotated_file="../results/{name}_annotated_peaks.tsv",
        gtf="/g/huber/users/peidli/utils/genomes/drosophila_melanogaster/Drosophila_melanogaster.BDGP6.46.110.gtf"
    output:
        "../results/{name}_annotated_peaks_2.csv"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    script:
        "../../scripts/snake_add_more_annotations.py"

### Motif Enrichment Analysis ###
rule get_fasta:
    # Get genome fasta
    output:
        TEMPDIR / "genome/BDGP6/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa"
    shell:
        """
        mkdir -p {TEMPDIR}/genome/BDGP6
        cd {TEMPDIR}/genome/BDGP6
        wget https://ftp.ensembl.org/pub/release-111/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        gunzip Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
        """

rule homer_define_motifs:
    # Define motifs for HOMER
    output:
        TEMPDIR / "homer/CANNTG.motif"
    conda: "homer_env" # "../../environments/homer_env.yaml"
    shell:
        """
        seq2profile.pl CANNTG 0 CANNTG_motif > {output}
        """

rule homer:
    # Motif analysis with HOMER
    input:
        peaks=TEMPDIR / "macs2/contrast_peaks.narrowPeak",
        fasta=TEMPDIR / "genome/BDGP6/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa",
        motif=TEMPDIR / "homer/CANNTG.motif"
    output:
        TEMPDIR / "homer/contrast_peaks_homer_motifs.tsv",
    conda: "homer_env" # "../../environments/homer_env.yaml"
    resources:
        time='04:00:00',
        mem_mb=64000,
        disk_mb=64000,
    shell:
        """
        mkdir -p {TEMPDIR}/homer/preparsed/
        cd {TEMPDIR}/homer/preparsed/

        # Usage: findMotifsGenome.pl <pos file> <genome> <output directory> [additional options]
        findMotifsGenome.pl {input.peaks} {input.fasta} {TEMPDIR}/homer/ \
            -preparsedDir {TEMPDIR}/homer/preparsed/ \
            -find {input.motif} > {output}
        """